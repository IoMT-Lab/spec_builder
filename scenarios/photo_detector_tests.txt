This program uses a photo detector over I²C. The driver already handles register reads and writes, and it has functions for turning the LED on and off. What I need are unit tests that confirm all the critical parts of the system behave correctly.
First, the initialization sequence. The unit test has to bring up the I²C interface, pass it into the driver, and then power on the device. After that, it should read three IDs—the auxiliary ID, the revision ID, and the base ID—and make sure they match the expected constants. Only after confirming the IDs should the LED control functions be enabled.
Next, LED control. I want a test that just calls the driver functions to turn the LED on and off. There’s no way to automate whether it actually lit up, but the test should still exist to show that the calls succeed.
For measurements, there are two modes: polling and interrupts. In polling mode, the unit test should enable measurements, then every five seconds read a measurement. Each time it reads, the LED should pulse on for about half a second and then off again. While it’s in polling mode, the interrupt registers should stay unset.
In interrupt mode, the unit test should configure high and low threshold registers, enable interrupt capability, and then check every second if an interrupt has triggered. If it has, read the measurement and pulse the LED. There should also be a negative test: set the thresholds to impossible values—low equal to zero and high equal to max—and confirm that no interrupts trigger and no measurements happen. And of course, make sure interrupts are actually enabled. It’s an easy error to configure thresholds but forget to enable the interrupts.
For measurement validation, the test should confirm that measurements return non-zero values. If all zeros come back continuously, that’s a failure, unless it’s really in a dark room. We’re only using channel 0 for now, so the rest of the channels and any light source controls can be ignored.
On error handling and misconfiguration, I want a test that proves polling mode ignores interrupts, even if thresholds are set in a way that should fire. And in interrupt mode, if thresholds are set to values that should always trip, the test should prove interrupts do actually occur. The order of operations also matters—IDs must be read before enabling the LED, thresholds must be set before enabling interrupts, and so on.
These unit tests need to run automatically without any user input. Pseudocode is fine if exact code isn’t possible. Placeholder “pass” tests can exist but only where necessary. What matters is covering initialization, LED control, polling, interrupt mode, thresholds, and misconfigurations.